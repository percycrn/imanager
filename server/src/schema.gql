#########################################################
#                    type definition
#########################################################
type User {
  uid: ID!
  name: String!
  tags: [String]
  email: String
  address: String
  phoneNumber: String! # add
  password: String! # add
}

type Activity {
  aid: ID!
  name: String!
  address: String
  startTime: String
  endTime: String
  now: Int # 已报人数
  max: Int # 最大人数
  min: Int # 最低人数
  summary: String # 教师写，管理员看？？
  tid: String! # 标签id
  signUpTime: String
  state: ActivityState
}

type Applicaton {
  uid: ID
  tag: String # tag name
  applyTime: String
  state: ApplicatonState
}

type ActivityRecord{
    uid: String!
    aid: String!
    tid: String! # 用户以什么身份报名
    signInTime: String! # 报名时间
    signUpTime: String # 签到时间
}

#登陆失败 error是错误信息，其余属性均为空。
#登陆成功 error为空，token用来维持会话，
#user是用户基本信息
#登陆成功，默认路由是/activity/public,
#publicActivites,用来渲染页面
type LoginRespon {
  token: String
  error: Error
  user: User
  publicActivites: [Activity]
}

#错误代码为三位数，具体待定
#业务错误以9开头
type Error {
  code: Int!
  message: String!
}

enum ActivityState {
  REGISTERING
  AFTER_REG
  HOLDING
  FINISHED
}

enum ApplicatonState {
  PEDDING
  PASS
  DENY
}

#########################################################
#                    input
#########################################################
input SignData {
  phoneNo: String
  password: String
}

input UserFilter {
  id: ID
  name: String
}

input UserInfo {
  email: String
  address: String
}

#########################################################
#                    entrance
#########################################################
type Query {
  # 约定每页加载10个
  # 管理员相关
  applicationList(page: Int, size: Int = 10): [Application] # 获得所有待审核的申请
  users(filter: UserFilter!): [User]
  # 用户相关
  publicActivites(page: Int, size: Int = 10): [Activity]
  joinedActivites(page: Int, size: Int = 10, uid: ID!): [Activity]
  userHistoryRecords(uid: ID!): [Activity]
  # 申请相关
  applications(page: Int, size: Int = 10, uid: ID!): [Applicaton]
}

type Mutation {
  # 注册登陆登出
  signIn(phoneNo: String, password: String): LoginRespon # 登陆
  signUp(data: SignData!): LoginRespon # 注册
  logOut(uid: ID): Boolean # 登出
  # 管理员的
  saveActivity(activity: Activity!): Activity
  deleteActivity(aid: String!): Activity
  modifyActivity(aid: String!, activity: Activity!): Activity
  checkApplication(uid: String!, tag: String!, state: String!) # 管理员改变申请状态
  # 用户相关
  modifyUserInfo(uid: ID!, user: UserInfo!): User
  signUpActivity(activityRecord: ActivityRecord!): ActivityRecord
  signInActivity(activityRecord: ActivityRecord!): ActivityRecord
  cancelActivity(aid: ID!, uid: ID!): Boolean
  # 申请相关
  apply(uid: String!, tag: String!, applyTime: String!): Applicaton
}

schema {
  query: Query
  mutation: Mutation
}
